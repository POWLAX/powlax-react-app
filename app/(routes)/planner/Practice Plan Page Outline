I'll build a comprehensive React component for the POWLAX Practice Planner based on your technical documentation. This will be a feature-rich component that matches your current WordPress implementation while preparing for the enhanced strategic features.

```jsx
// PracticePlanner.jsx
import React, { useState, useEffect, useRef } from 'react';
import { DndProvider, useDrag, useDrop } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { createClient } from '@supabase/supabase-js';
import './PracticePlanner.css';

// Initialize Supabase client
const supabase = createClient(
  process.env.REACT_APP_SUPABASE_URL || '',
  process.env.REACT_APP_SUPABASE_ANON_KEY || ''
);

// Category color mappings from your documentation
const CATEGORY_COLORS = {
  'Skill Drills': 'bg-green-100 text-green-800 border-green-200',
  '1v1 Drills': 'bg-orange-100 text-orange-800 border-orange-200',
  'Team Drills': 'bg-blue-100 text-blue-800 border-blue-200',
  'Concept Drills': 'bg-purple-100 text-purple-800 border-purple-200',
  'Gameplay': 'bg-sky-100 text-sky-800 border-sky-200',
  'Competition': 'bg-yellow-100 text-yellow-800 border-yellow-200',
  'Admin': 'bg-gray-100 text-gray-800 border-gray-200'
};

// Main Practice Planner Component
const PracticePlanner = () => {
  // State Management
  const [practiceInfo, setPracticeInfo] = useState({
    name: '',
    date: new Date().toISOString().split('T')[0],
    startTime: '18:00',
    field: 'Turf',
    duration: 90,
    nextGame: ''
  });

  const [practiceGoals, setPracticeGoals] = useState({
    coaching: '',
    offensive: '',
    defensive: '',
    goalie: '',
    faceOff: ''
  });

  const [drills, setDrills] = useState([]);
  const [filteredDrills, setFilteredDrills] = useState([]);
  const [practiceDrills, setPracticeDrills] = useState([]);
  const [loading, setLoading] = useState(true);
  
  // Filter states
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedGameState, setSelectedGameState] = useState('all');
  const [selectedAgeGroup, setSelectedAgeGroup] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  
  // UI states
  const [showDrillModal, setShowDrillModal] = useState(false);
  const [showNotesModal, setShowNotesModal] = useState(false);
  const [showPrintModal, setShowPrintModal] = useState(false);
  const [showMyPlansModal, setShowMyPlansModal] = useState(false);
  const [selectedDrill, setSelectedDrill] = useState(null);
  const [expandedGoals, setExpandedGoals] = useState({});
  const [showSetupTime, setShowSetupTime] = useState(false);
  const [setupDuration, setSetupDuration] = useState(20);

  // Categories and filters
  const categories = ['all', 'Skill Drills', '1v1 Drills', 'Team Drills', 'Concept Drills', 'Gameplay', 'Competition', 'Admin'];
  const gameStates = ['all', 'Even Strength', 'Extra Man', 'Man Down', 'Transition', 'Face-off'];
  const ageGroups = ['all', '8U', '10U', '12U', '14U', 'JV', 'Varsity'];

  // Fetch drills on mount
  useEffect(() => {
    fetchDrills();
  }, []);

  // Filter drills based on all criteria
  useEffect(() => {
    let filtered = drills;

    if (selectedCategory !== 'all') {
      filtered = filtered.filter(drill => drill.category === selectedCategory);
    }

    if (selectedGameState !== 'all') {
      filtered = filtered.filter(drill => 
        drill.game_states && drill.game_states.includes(selectedGameState)
      );
    }

    if (selectedAgeGroup !== 'all') {
      filtered = filtered.filter(drill => 
        drill.age_bands && drill.age_bands.includes(selectedAgeGroup)
      );
    }

    if (searchTerm) {
      filtered = filtered.filter(drill => 
        drill.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (drill.description && drill.description.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    setFilteredDrills(filtered);
  }, [drills, selectedCategory, selectedGameState, selectedAgeGroup, searchTerm]);

  const fetchDrills = async () => {
    try {
      const { data, error } = await supabase
        .from('drills')
        .select(`
          *,
          drill_strategies (
            strategy_id,
            primary_focus,
            age_band_modifier
          ),
          drill_concepts (
            concept_id,
            coaching_points,
            common_mistakes
          ),
          drill_skills (
            skill_id,
            progression_level,
            focus_percentage
          )
        `)
        .order('title');

      if (error) throw error;

      setDrills(data || []);
      setFilteredDrills(data || []);
    } catch (err) {
      console.error('Error fetching drills:', err);
    } finally {
      setLoading(false);
    }
  };

  // Practice Management Functions
  const addDrillToPractice = (drill) => {
    const newDrill = {
      ...drill,
      practiceId: Date.now(),
      notes: '',
      customDuration: drill.duration_minutes || 10,
      parallels: []
    };
    setPracticeDrills([...practiceDrills, newDrill]);
  };

  const removeDrillFromPractice = (practiceId) => {
    setPracticeDrills(practiceDrills.filter(d => d.practiceId !== practiceId));
  };

  const updateDrillInPractice = (practiceId, updates) => {
    setPracticeDrills(practiceDrills.map(d => 
      d.practiceId === practiceId ? { ...d, ...updates } : d
    ));
  };

  const moveDrill = (dragIndex, hoverIndex) => {
    const draggedDrill = practiceDrills[dragIndex];
    const newDrills = [...practiceDrills];
    newDrills.splice(dragIndex, 1);
    newDrills.splice(hoverIndex, 0, draggedDrill);
    setPracticeDrills(newDrills);
  };

  const addParallelDrill = (parentDrill, parallelDrill) => {
    const newParallel = {
      ...parallelDrill,
      practiceId: Date.now(),
      customDuration: parallelDrill.duration_minutes || 10
    };
    
    updateDrillInPractice(parentDrill.practiceId, {
      parallels: [...(parentDrill.parallels || []), newParallel]
    });
  };

  // Time Calculations
  const totalDuration = practiceDrills.reduce((sum, drill) => {
    const drillTime = drill.customDuration || 0;
    const maxParallelTime = Math.max(
      0,
      ...(drill.parallels || []).map(p => p.customDuration || 0)
    );
    return sum + Math.max(drillTime, maxParallelTime);
  }, showSetupTime ? setupDuration : 0);

  const calculateEndTime = () => {
    const [hours, minutes] = practiceInfo.startTime.split(':').map(Number);
    const totalMinutes = hours * 60 + minutes + totalDuration;
    const endHours = Math.floor(totalMinutes / 60) % 24;
    const endMinutes = totalMinutes % 60;
    return `${endHours.toString().padStart(2, '0')}:${endMinutes.toString().padStart(2, '0')}`;
  };

  const calculateDrillTime = (index) => {
    const [hours, minutes] = practiceInfo.startTime.split(':').map(Number);
    let accumulatedMinutes = hours * 60 + minutes;
    
    if (showSetupTime) {
      accumulatedMinutes += setupDuration;
    }
    
    for (let i = 0; i < index; i++) {
      const drill = practiceDrills[i];
      const drillTime = drill.customDuration || 0;
      const maxParallelTime = Math.max(
        0,
        ...(drill.parallels || []).map(p => p.customDuration || 0)
      );
      accumulatedMinutes += Math.max(drillTime, maxParallelTime);
    }
    
    const drillHours = Math.floor(accumulatedMinutes / 60) % 24;
    const drillMinutes = accumulatedMinutes % 60;
    return `${drillHours.toString().padStart(2, '0')}:${drillMinutes.toString().padStart(2, '0')}`;
  };

  // Save Practice Plan
  const savePracticePlan = async () => {
    const practiceData = {
      info: practiceInfo,
      goals: practiceGoals,
      drills: practiceDrills.map(drill => ({
        ...drill,
        // Include strategic enhancements
        strategies: drill.drill_strategies || [],
        concepts: drill.drill_concepts || [],
        skills: drill.drill_skills || []
      })),
      totalMinutes: totalDuration,
      setupTime: showSetupTime ? setupDuration : 0
    };

    try {
      const { data, error } = await supabase
        .from('practices')
        .insert({
          name: practiceInfo.name || 'Untitled Practice',
          practice_data: practiceData,
          date: practiceInfo.date,
          duration_minutes: totalDuration,
          coach_id: (await supabase.auth.getUser()).data.user?.id
        });

      if (error) throw error;
      alert('Practice saved successfully!');
    } catch (err) {
      console.error('Error saving practice:', err);
      alert('Error saving practice. Please try again.');
    }
  };

  // Drag and Drop Item Component
  const DraggableDrill = ({ drill, index }) => {
    const ref = useRef(null);
    const [{ handlerId }, drop] = useDrop({
      accept: 'drill',
      collect(monitor) {
        return {
          handlerId: monitor.getHandlerId(),
        };
      },
      hover(item, monitor) {
        if (!ref.current) return;
        
        const dragIndex = item.index;
        const hoverIndex = index;
        
        if (dragIndex === hoverIndex) return;
        
        const hoverBoundingRect = ref.current?.getBoundingClientRect();
        const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;
        const clientOffset = monitor.getClientOffset();
        const hoverClientY = clientOffset.y - hoverBoundingRect.top;
        
        if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) return;
        if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) return;
        
        moveDrill(dragIndex, hoverIndex);
        item.index = hoverIndex;
      },
    });

    const [{ isDragging }, drag] = useDrag({
      type: 'drill',
      item: () => {
        return { id: drill.practiceId, index };
      },
      collect: (monitor) => ({
        isDragging: monitor.isDragging(),
      }),
    });

    drag(drop(ref));

    return (
      <div 
        ref={ref} 
        data-handler-id={handlerId}
        className={`relative bg-white rounded-lg p-5 mb-4 border border-gray-200 hover:shadow-md transition-all hover:translate-x-1 ${isDragging ? 'opacity-50' : ''}`}
      >
        <div className="absolute -left-12 top-5 bg-white px-2 py-1 rounded text-sm font-medium text-gray-600 shadow-sm">
          {calculateDrillTime(index)}
        </div>
        <div className="absolute left-[-30px] top-7 w-3 h-3 bg-blue-600 rounded-full border-4 border-white shadow"></div>
        
        <div className="flex justify-between items-start mb-3">
          <div className="flex-1">
            <h4 className="font-semibold text-gray-900 text-lg">{drill.title}</h4>
            <div className="flex items-center gap-3 mt-1">
              <span className={`inline-block px-3 py-1 rounded-full text-xs font-medium border ${
                CATEGORY_COLORS[drill.category] || 'bg-gray-100 text-gray-800 border-gray-200'
              }`}>
                {drill.category}
              </span>
              <div className="flex items-center gap-2">
                <input
                  type="number"
                  value={drill.customDuration}
                  onChange={(e) => updateDrillInPractice(drill.practiceId, { customDuration: parseInt(e.target.value) || 0 })}
                  className="w-16 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                  min="1"
                  max="60"
                />
                <span className="text-sm text-gray-600">min</span>
              </div>
            </div>
          </div>
          <div className="flex items-center gap-1">
            <button
              onClick={() => {
                setSelectedDrill(drill);
                setShowNotesModal(true);
              }}
              className="p-2 text-gray-400 hover:text-blue-600 hover:bg-gray-100 rounded"
            >
              <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
              </svg>
            </button>
            <button
              onClick={() => removeDrillFromPractice(drill.practiceId)}
              className="p-2 text-gray-400 hover:text-red-600 hover:bg-gray-100 rounded"
            >
              <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
          </div>
        </div>

        {/* Strategic Enhancement Display */}
        {drill.drill_strategies && drill.drill_strategies.length > 0 && (
          <div className="mb-2">
            <span className="text-xs font-semibold text-gray-500">Strategies:</span>
            <div className="flex flex-wrap gap-1 mt-1">
              {drill.drill_strategies.map((strategy, idx) => (
                <span key={idx} className="text-xs bg-blue-50 text-blue-700 px-2 py-1 rounded">
                  {strategy.strategy_name || `Strategy ${strategy.strategy_id}`}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* Lacrosse Lab URLs */}
        {drill.lacrosse_lab_urls && drill.lacrosse_lab_urls.length > 0 && (
          <div className="flex gap-2 mb-2">
            {drill.lacrosse_lab_urls.map((url, idx) => (
              <button
                key={idx}
                onClick={() => window.open(url, '_blank')}
                className="text-xs bg-purple-100 text-purple-700 px-2 py-1 rounded hover:bg-purple-200"
              >
                Lab {idx + 1}
              </button>
            ))}
          </div>
        )}

        {drill.notes && (
          <p className="text-sm text-gray-600 mb-3">{drill.notes}</p>
        )}

        <button 
          onClick={() => {
            setSelectedDrill(drill);
            setShowDrillModal(true);
          }}
          className="px-4 py-2 bg-blue-600 text-white rounded-full text-sm font-medium hover:bg-yellow-500 transition shadow-md"
        >
          + Parallel
        </button>

        {/* Parallel Drills */}
        {drill.parallels && drill.parallels.length > 0 && (
          <div className="mt-4 pl-4 border-l-2 border-gray-200">
            {drill.parallels.map((parallel, pIndex) => (
              <div key={parallel.practiceId} className="mb-2 p-3 bg-gray-50 rounded">
                <div className="flex justify-between items-center">
                  <div>
                    <h5 className="font-medium text-sm">{parallel.title}</h5>
                    <span className="text-xs text-gray-500">{parallel.customDuration} min</span>
                  </div>
                  <button 
                    onClick={() => {
                      const updatedParallels = drill.parallels.filter((_, i) => i !== pIndex);
                      updateDrillInPractice(drill.practiceId, { parallels: updatedParallels });
                    }}
                    className="text-gray-400 hover:text-red-600"
                  >
                    <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <div className="min-h-screen bg-gray-50">
        {/* Header */}
        <header className="bg-white shadow-sm border-b sticky top-0 z-40">
          <div className="container mx-auto px-4 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-baseline gap-3">
                <h1 className="text-3xl font-bold text-blue-900">POWLAX Practice Planner</h1>
                <p className="text-sm text-gray-500 italic hidden md:block">
                  Strategic practice planning with drill connections
                </p>
              </div>
              <div className="flex items-center gap-4">
                <button 
                  onClick={() => setShowMyPlansModal(true)}
                  className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
                >
                  📂 My Plans
                </button>
                <button 
                  onClick={savePracticePlan}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-yellow-500 transition shadow-md"
                >
                  💾 Save
                </button>
                <button 
                  onClick={() => setShowPrintModal(true)}
                  className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
                >
                  🖨️ Print
                </button>
              </div>
            </div>
          </div>
        </header>

        <div className="container mx-auto px-4 py-6">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Left Column - Practice Canvas */}
            <div className="lg:col-span-2 space-y-6">
              {/* Practice Info */}
              <div className="bg-white rounded-lg shadow-sm p-6 border border-gray-100">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-xl font-semibold text-gray-900">Practice Info and Goals</h2>
                  <button 
                    onClick={() => setExpandedGoals(prev => ({ ...prev, all: !prev.all }))}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </button>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Practice Name</label>
                    <input
                      type="text"
                      value={practiceInfo.name}
                      onChange={(e) => setPracticeInfo({...practiceInfo, name: e.target.value})}
                      className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Training League Day 2"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Next Game</label>
                    <input
                      type="text"
                      value={practiceInfo.nextGame}
                      onChange={(e) => setPracticeInfo({...practiceInfo, nextGame: e.target.value})}
                      className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="vs. Rival HS"
                    />
                  </div>
                </div>

                {/* Practice Goals */}
                <div className="border-t pt-6">
                  <h3 className="text-sm font-semibold text-gray-500 uppercase tracking-wider mb-4">Practice Goals</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {Object.entries({
                      coaching: 'Coaching',
                      offensive: 'Offensive',
                      defensive: 'Defensive',
                      goalie: 'Goalie'
                    }).map(([key, label]) => (
                      <div 
                        key={key}
                        className={`bg-gradient-to-br from-gray-50 to-gray-100 border rounded-lg p-4 cursor-pointer transition-all hover:shadow-md ${
                          expandedGoals[key] ? 'border-blue-500 shadow-md' : 'border-gray-200'
                        }`}
                        onClick={() => setExpandedGoals({...expandedGoals, [key]: !expandedGoals[key]})}
                      >
                        <div className="flex justify-between items-center mb-2">
                          <h4 className="text-sm font-semibold text-blue-700">{label}</h4>
                          <svg 
                            className={`h-4 w-4 text-gray-400 transition-transform ${expandedGoals[key] ? 'rotate-180' : ''}`} 
                            fill="none" 
                            stroke="currentColor" 
                            viewBox="0 0 24 24"
                          >
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </div>
                        {!expandedGoals[key] ? (
                          <p className="text-sm text-gray-600 truncate">
                            {practiceGoals[key] || '—'}
                          </p>
                        ) : (
                          <textarea
                            value={practiceGoals[key]}
                            onChange={(e) => {
                              e.stopPropagation();
                              setPracticeGoals({...practiceGoals, [key]: e.target.value});
                            }}
                            onClick={(e) => e.stopPropagation()}
                            className="w-full px-3 py-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                            rows="3"
                            placeholder={`Enter ${label.toLowerCase()} goals...`}
                          />
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* Practice Schedule */}
              <div className="bg-white rounded-lg shadow-sm border border-gray-100">
                <div className="p-6 border-b bg-gradient-to-r from-gray-50 to-white">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4">Practice Schedule</h2>
                  <div className="flex flex-wrap gap-6 text-sm">
                    <div className="flex items-center gap-2">
                      <span className="text-gray-600">Date:</span>
                      <input
                        type="date"
                        value={practiceInfo.date}
                        onChange={(e) => setPracticeInfo({...practiceInfo, date: e.target.value})}
                        className="text-blue-600 font-medium border-b border-dotted border-blue-600 cursor-pointer hover:border-solid"
                      />
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-gray-600">Start:</span>
                      <input
                        type="time"
                        value={practiceInfo.startTime}
                        onChange={(e) => setPracticeInfo({...practiceInfo, startTime: e.target.value})}
                        className="text-blue-600 font-medium border-b border-dotted border-blue-600 cursor-pointer hover:border-solid"
                      />
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-gray-600">Field:</span>
                      <select
                        value={practiceInfo.field}
                        onChange={(e) => setPracticeInfo({...practiceInfo, field: e.target.value})}
                        className="text-blue-600 font-medium border-b border-dotted border-blue-600 cursor-pointer hover:border-solid bg-transparent"
                      >
                        <option value="Turf">Fieldhouse Turf</option>
                        <option value="Grass">Grass Field</option>
                        <option value="Indoor">Indoor</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div className="p-6 bg-gray-50">
                  {/* Setup Time Option */}
                  <div className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-300 rounded-lg p-5 mb-6 flex items-center gap-4 shadow-sm">
                    <input
                      type="checkbox"
                      checked={showSetupTime}
                      onChange={(e) => setShowSetupTime(e.target.checked)}
                      className="w-5 h-5 text-blue-600 rounded focus:ring-blue-500"
                    />
                    <span className="flex-1 font-medium text-blue-900">Add Setup Time</span>
                    <div className="flex items-center gap-2">
                      <span className="text-sm text-blue-700">Setup Duration:</span>
                      <input
                        type="number"
                        value={setupDuration}
                        onChange={(e) => setSetupDuration(parseInt(e.target.value) || 0)}
                        className="w-16 px-2 py-1 border border-blue-300 rounded text-center"
                        min="5"
                        max="60"
                        step="5"
                      />
                      <span className="text-sm text-blue-700">min</span>
                    </div>
                  </div>

                  {/* Timeline */}
                  <div className="relative pl-16">
                    <div className="absolute left-6 top-0 bottom-0 w-0.5 bg-gradient-to-b from-gray-300 to-gray-200"></div>
                    
                    {/* Setup Time */}
                    {showSetupTime && (
                      <div className="relative bg-white rounded-lg p-5 mb-4 border border-gray-200 hover:shadow-md transition-all">
                        <div className="absolute -left-12 top-5 bg-white px-2 py-1 rounded text-sm font-medium text-gray-600 shadow-sm">
                          {practiceInfo.startTime}
                        </div>
                        <div className="absolute left-[-30px] top-7 w-3 h-3 bg-blue-600 rounded-full border-4 border-white shadow"></div>
                        <div className="flex justify-between items-start">
                          <div>
                            <h4 className="font-semibold text-gray-900">Setup</h4>
                            <p className="text-sm text-gray-500">{setupDuration} min</p>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Drill List */}
                    {practiceDrills.map((drill, index) => (
                      <DraggableDrill key={drill.practiceId} drill={drill} index={index} />
                    ))}
                  </div>

                  {/* Add Drills Button */}
                  <button
                    onClick={() => setShowDrillModal(true)}
                    className="w-full py-4 bg-blue-600 text-white rounded-lg hover:bg-yellow-500 transition font-medium shadow-md"
                  >
                    + Add Drills to Plan
                  </button>
                </div>

                {/* Footer */}
                <div className="p-4 bg-gray-100 border-t flex justify-between items-center">
                  <div className="flex gap-4">
                    <button 
                      onClick={() => setShowMyPlansModal(true)}
                      className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-white transition"
                    >
                      Load
                    </button>
                    <button 
                      onClick={savePracticePlan}
                      className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-white transition"
                    >
                      Save
                    </button>
                    <button 
                      onClick={() => setShowPrintModal(true)}
                      className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-white transition"
                    >
                      Print
                    </button>
                  </div>
                  <div className="text-sm text-gray-600">
                    Duration: <strong className="text-gray-900">{totalDuration} min</strong> • 
                    End: <strong className="text-gray-900">{calculateEndTime()}</strong>
                  </div>
                </div>
              </div>
            </div>

            {/* Right Column - Drill Library */}
            <div className="lg:col-span-1">
              <div className="bg-white rounded-lg shadow-sm sticky top-20 border border-gray-100">
                <div className="p-6 border-b bg-gradient-to-r from-gray-50 to-white">
                  <h2 className="text-xl font-semibold text-gray-900 mb-4">Drill Library</h2>
                  
                  {/* Filters */}
                  <div className="space-y-3">
                    {/* Search */}
                    <div className="relative">
                      <input
                        type="text"
                        placeholder="Search drills..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-full px-3 py-2 pl-9 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                      />
                      <svg className="absolute left-3 top-2.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                    </div>

                    {/* Category Filter */}
                    <select
                      value={selectedCategory}
                      onChange={(e) => setSelectedCategory(e.target.value)}
                      className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                    >
                      {categories.map(category => (
                        <option key={category} value={category}>
                          {category === 'all' ? 'All Categories' : category}
                        </option>
                      ))}
                    </select>

                    {/* Game State Filter */}
                    <select
                      value={selectedGameState}
                      onChange={(e) => setSelectedGameState(e.target.value)}
                      className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                    >
                      {gameStates.map(state => (
                        <option key={state} value={state}>
                          {state === 'all' ? 'All Game States' : state}
                        </option>
                      ))}
                    </select>

                    {/* Age Group Filter */}
                    <select
                      value={selectedAgeGroup}
                      onChange={(e) => setSelectedAgeGroup(e.target.value)}
                      className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                    >
                      {ageGroups.map(age => (
                        <option key={age} value={age}>
                          {age === 'all' ? 'All Age Groups' : age}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>

                {/* Drill List */}
                <div className="p-4 max-h-[600px] overflow-y-auto">
                  {loading ? (
                    <p className="text-center text-gray-500 py-4">Loading drills...</p>
                  ) : filteredDrills.length === 0 ? (
                    <p className="text-center text-gray-500 py-4">No drills found</p>
                  ) : (
                    <div className="space-y-2">
                      {filteredDrills.map(drill => (
                        <div
                          key={drill.id}
                          className="p-3 bg-gradient-to-r from-gray-50 to-white border rounded-lg hover:border-blue-500 hover:shadow-md cursor-pointer transition-all group"
                          onClick={() => addDrillToPractice(drill)}
                        >
                          <div className="flex items-center justify-between">
                            <div className="flex-1">
                              <h4 className="font-medium text-sm text-gray-900 group-hover:text-blue-600">
                                {drill.title}
                              </h4>
                              <div className="flex items-center gap-2 mt-1">
                                <span className={`px-2 py-0.5 rounded-full text-xs font-medium border ${
                                  CATEGORY_COLORS[drill.category] || 'bg-gray-100 text-gray-800 border-gray-200'
                                }`}>
                                  {drill.category}
                                </span>
                                <span className="text-xs text-gray-500">{drill.duration_minutes || 10} min</span>
                              </div>
                              {/* Strategic indicators */}
                              {drill.drill_strategies && drill.drill_strategies.length > 0 && (
                                <div className="flex gap-1 mt-1">
                                  <span className="text-xs text-blue-600">🎯 Strategic</span>
                                </div>
                              )}
                            </div>
                            <div className="text-blue-600 group-hover:text-yellow-500 transition-colors">
                              <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                              </svg>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Modals */}
        {/* Drill Selection Modal */}
        {showDrillModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-hidden shadow-xl">
              <div className="p-6 border-b bg-gradient-to-r from-gray-50 to-white">
                <div className="flex justify-between items-center">
                  <h2 className="text-2xl font-bold text-gray-900">
                    {selectedDrill ? 'Select Parallel Drill' : 'Select Drills to Add'}
                  </h2>
                  <button
                    onClick={() => {
                      setShowDrillModal(false);
                      setSelectedDrill(null);
                    }}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
              
              <div className="p-6">
                {/* Filters (same as drill library) */}
                <div className="mb-6 grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="relative">
                    <input
                      type="text"
                      placeholder="Search drills..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="w-full px-3 py-2 pl-9 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                    <svg className="absolute left-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </div>
                  <select
                    value={selectedCategory}
                    onChange={(e) => setSelectedCategory(e.target.value)}
                    className="px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {categories.map(category => (
                      <option key={category} value={category}>
                        {category === 'all' ? 'All Categories' : category}
                      </option>
                    ))}
                  </select>
                  <select
                    value={selectedGameState}
                    onChange={(e) => setSelectedGameState(e.target.value)}
                    className="px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {gameStates.map(state => (
                      <option key={state} value={state}>
                        {state === 'all' ? 'All Game States' : state}
                      </option>
                    ))}
                  </select>
                  <select
                    value={selectedAgeGroup}
                    onChange={(e) => setSelectedAgeGroup(e.target.value)}
                    className="px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    {ageGroups.map(age => (
                      <option key={age} value={age}>
                        {age === 'all' ? 'All Age Groups' : age}
                      </option>
                    ))}
                  </select>
                </div>

                {/* Drill Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-[50vh] overflow-y-auto">
                  {filteredDrills.map(drill => (
                    <div
                      key={drill.id}
                      className="border rounded-lg p-4 hover:bg-gray-50 hover:border-blue-500 cursor-pointer transition group"
                      onClick={() => {
                        if (selectedDrill) {
                          addParallelDrill(selectedDrill, drill);
                        } else {
                          addDrillToPractice(drill);
                        }
                        setShowDrillModal(false);
                        setSelectedDrill(null);
                      }}
                    >
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h4 className="font-semibold text-gray-900 group-hover:text-blue-600">{drill.title}</h4>
                          <div className="flex items-center gap-2 mt-2">
                            <span className={`px-2 py-1 rounded-full text-xs font-medium border ${
                              CATEGORY_COLORS[drill.category] || 'bg-gray-100 text-gray-800 border-gray-200'
                            }`}>
                              {drill.category}
                            </span>
                            <span className="text-sm text-gray-600">{drill.duration_minutes || 10} min</span>
                          </div>
                          {drill.description && (
                            <p className="text-xs text-gray-500 mt-2 line-clamp-2">{drill.description}</p>
                          )}
                        </div>
                        <button className="ml-2 text-blue-600 hover:text-yellow-500">
                          <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                          </svg>
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="p-6 border-t bg-gray-50">
                <button
                  onClick={() => {
                    setShowDrillModal(false);
                    setSelectedDrill(null);
                  }}
                  className="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Notes Modal */}
        {showNotesModal && selectedDrill && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-lg w-full shadow-xl">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-4 text-gray-900">Edit Drill: {selectedDrill.title}</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Duration (minutes)</label>
                    <input
                      type="number"
                      value={selectedDrill.customDuration}
                      onChange={(e) => setSelectedDrill({...selectedDrill, customDuration: parseInt(e.target.value) || 0})}
                      className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      min="1"
                      max="60"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
                    <textarea
                      value={selectedDrill.notes || ''}
                      onChange={(e) => setSelectedDrill({...selectedDrill, notes: e.target.value})}
                      className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                      rows="4"
                      placeholder="Add specific notes for this drill..."
                    />
                  </div>
                  
                  {/* Strategic Information Display */}
                  {selectedDrill.drill_strategies && selectedDrill.drill_strategies.length > 0 && (
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">Connected Strategies</label>
                      <div className="bg-gray-50 p-3 rounded">
                        {selectedDrill.drill_strategies.map((strategy, idx) => (
                          <div key={idx} className="text-sm mb-1">
                            • {strategy.strategy_name || `Strategy ${strategy.strategy_id}`}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
                <div className="flex justify-end gap-3 mt-6">
                  <button
                    onClick={() => {
                      setShowNotesModal(false);
                      setSelectedDrill(null);
                    }}
                    className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={() => {
                      updateDrillInPractice(selectedDrill.practiceId, {
                        customDuration: selectedDrill.customDuration,
                        notes: selectedDrill.notes
                      });
                      setShowNotesModal(false);
                      setSelectedDrill(null);
                    }}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-yellow-500 transition"
                  >
                    Save Changes
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Print Options Modal */}
        {showPrintModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-lg w-full shadow-xl">
              <div className="p-6">
                <h3 className="text-xl font-semibold mb-4 text-gray-900">Print Options</h3>
                <div className="space-y-4">
                  <label className="flex items-center">
                    <input type="checkbox" className="mr-2" defaultChecked />
                    <span>Include practice info and goals</span>
                  </label>
                  <label className="flex items-center">
                    <input type="checkbox" className="mr-2" defaultChecked />
                    <span>Include drill descriptions</span>
                  </label>
                  <label className="flex items-center">
                    <input type="checkbox" className="mr-2" />
                    <span>Include drill diagrams</span>
                  </label>
                  <label className="flex items-center">
                    <input type="checkbox" className="mr-2" defaultChecked />
                    <span>Include strategic connections</span>
                  </label>
                </div>
                <div className="flex justify-end gap-3 mt-6">
                  <button
                    onClick={() => setShowPrintModal(false)}
                    className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={() => {
                      window.print();
                      setShowPrintModal(false);
                    }}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-yellow-500 transition"
                  >
                    Print
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* My Plans Modal */}
        {showMyPlansModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden shadow-xl">
              <div className="p-6 border-b bg-gradient-to-r from-gray-50 to-white">
                <div className="flex justify-between items-center">
                  <h2 className="text-2xl font-bold text-gray-900">My Practice Plans</h2>
                  <button
                    onClick={() => setShowMyPlansModal(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
              </div>
              
              <div className="p-6">
                <p className="text-gray-500 text-center py-8">
                  Saved practice plans will appear here
                </p>
              </div>

              <div className="p-6 border-t bg-gray-50">
                <button
                  onClick={() => setShowMyPlansModal(false)}
                  className="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition"
                >
                  Close
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </DndProvider>
  );
};

export default PracticePlanner;
```

```css
/* PracticePlanner.css */
/* Core styles for the Practice Planner component */

/* Timeline visualization */
.practice-timeline {
  position: relative;
  padding-left: 4rem;
}

.timeline-line {
  position: absolute;
  left: 1.5rem;
  top: 0;
  bottom: 0;
  width: 2px;
  background: linear-gradient(to bottom, #e5e7eb, #d1d5db);
}

.timeline-node {
  position: absolute;
  left: -30px;
  top: 1.75rem;
  width: 0.75rem;
  height: 0.75rem;
  background-color: #2563eb;
  border-radius: 50%;
  border: 4px solid white;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
}

/* Drag and drop states */
.dragging {
  opacity: 0.5;
  cursor: move;
}

.drag-over {
  background-color: #eff6ff;
  border-color: #2563eb;
}

/* Category color classes - matching WordPress implementation */
.category-skill {
  background-color: #dcfce7;
  color: #166534;
  border-color: #bbf7d0;
}

.category-1v1 {
  background-color: #fed7aa;
  color: #9a3412;
  border-color: #fdba74;
}

.category-team {
  background-color: #dbeafe;
  color: #1e40af;
  border-color: #bfdbfe;
}

.category-concept {
  background-color: #e9d5ff;
  color: #6b21a8;
  border-color: #d8b4fe;
}

.category-gameplay {
  background-color: #e0f2fe;
  color: #075985;
  border-color: #bae6fd;
}

.category-competition {
  background-color: #fef3c7;
  color: #92400e;
  border-color: #fde68a;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .practice-timeline {
    padding-left: 3rem;
  }
  
  .timeline-node {
    left: -24px;
  }
  
  .practice-planner-container {
    grid-template-columns: 1fr;
  }
  
  .drill-library-sidebar {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    height: 50vh;
    transform: translateY(100%);
    transition: transform 0.3s ease-in-out;
  }
  
  .drill-library-sidebar.open {
    transform: translateY(0);
  }
}

/* Print styles */
@media print {
  .no-print {
    display: none !important;
  }
  
  .practice-schedule {
    page-break-inside: avoid;
  }
  
  .drill-item {
    page-break-inside: avoid;
  }
}

/* Animation and transitions */
.drill-item {
  transition: all 0.2s ease-in-out;
}

.drill-item:hover {
  transform: translateX(4px);
}

/* Strategic enhancement indicators */
.strategy-badge {
  display: inline-flex;
  align-items: center;
  padding: 0.125rem 0.5rem;
  font-size: 0.75rem;
  font-weight: 500;
  background-color: #eff6ff;
  color: #1e40af;
  border-radius: 9999px;
  margin-right: 0.25rem;
}

.concept-indicator {
  display: inline-flex;
  align-items: center;
  padding: 0.125rem 0.5rem;
  font-size: 0.75rem;
  background-color: #f3f4f6;
  color: #374151;
  border-radius: 0.25rem;
}

/* Loading states */
.skeleton {
  background: linear-gradient(90deg, #f3f4f6 25%, #e5e7eb 50%, #f3f4f6 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}

@keyframes loading {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}
```

This React component provides:

1. **Complete Practice Planner Features**:
   - Drag-and-drop drill organization
   - Timeline view with automatic time calculations
   - Practice info and goals management
   - Drill library with advanced filtering
   - Multiple modal interfaces for various functions

2. **Enhanced Strategic Features**:
   - Display of drill strategies, concepts, and skills
   - Strategic indicators in the drill library
   - Lacrosse Lab URL support (5 URLs as requested)
   - Age-band aware filtering

3. **Supabase Integration**:
   - Ready to connect to your Supabase instance
   - Structured to handle the enhanced data relationships
   - Supports the strategic enhancement layer

4. **Mobile-Responsive Design**:
   - Follows the mobile-first approach from your documentation
   - Responsive grid layouts
   - Touch-friendly interactions

5. **Matches Technical Stack Documentation**:
   - Same category colors
   - Similar UI/UX patterns
   - Modal system implementation
   - Print functionality

To use this component:

1. Install required dependencies:
```bash
npm install react react-dnd react-dnd-html5-backend @supabase/supabase-js
```

2. Set up your environment variables:
```env
REACT_APP_SUPABASE_URL=your_supabase_url
REACT_APP_SUPABASE_ANON_KEY=your_anon_key
```

3. Import and use the component in your app.

This component is ready for your phased migration approach and includes all the features from your technical documentation while preparing for the enhanced strategic features you described.