Number one, use the right model for the right task. Not all LLMs are created equal. You need to check its context size. Compare the official benchmark scores. Do a little vibe test yourself. And a great tip actually is that if you use something like close for set or close for opus, just check it with a different model like 03.
Don't use the same model from the same company to verify the code that an AI agent wrote. So if you use OpenAI model like 03 or GBD5 coming soon, just use Gemini 2.5 Pro from Google to check the output. Pro tip number two, use AI to build new features. When you start a new project or add a new feature, AI speedups can be insane.
10x, 20x, maybe even 100x if you really know what you're doing. AI agents can help you design an entire codebase in a matter of minutes. Plus, you can quickly test all kinds of different ideas from unique angles. Tip number three, if you are going to be using AI on large code bases, you can absolutely do it, but make sure to follow these rules.
Number one, make small focus changes only. Number two, avoid huge refactors in one go. Split it into four, five, six stages. Number three, work in a feature branch only. Make sure to create a new branch and work there. Do not work on staging on main. None of that. Also, never push directly to main. No matter how tempting it might be, it will bite you in the ass in the long run. And lastly, commit often.
Do a GitHub commit every 10 to 15 minutes. With AIS, you can have them write the GitHub message. Write the commit message. For example, if you use cloth code, it knows already what you're doing. Same with Cursor. Same with Windsor. All of these AI tools, they pay attention to what you're doing. So, they can just write the commitment message in a matter of half a second instead of you writing a short one or being lazy or leaving it empty, code forbid.
AI coding tip number four, how to avoid errors from the start. This is the best strategy, right? Start by having the AI analyze the codebase. Do not rush into changes. Tell it to find all of the relevant files. Make a list of them and read through all of them. Also, actually put in more effort yourself and provide the LLM with tons of context.
Obviously, keep it related to what you're actually doing. Next, and this is uh something that most people like to skip, but try to understand the feature or the bug yourself first. I know this is not sexy, right? Everybody wants to delegate everything to AI, but if you actually do this, if you spend a few minutes trying to understand what's happening yourself, you can move way faster and you'll be able to spot when the AI is going off track.
And then a lot of software development fundamentals such as running llinters, type checks, automated tests to catch as many issues as early as possible. Tip number five, discipline equals speed. With the correct workflows, you can work way faster. Your main takeaway here should be to spend more time before you have the AI write any lines of code.
The more time you spend before, the faster you can build a feature and the less errors you'll run into. What I do with every single feature, I create a markdown file. I type in my exact vision. I lay out the steps I necessary. I lay out what I don't understand. I lay out what I already know. And only then, only after like 20 minutes of me writing into markdown file manually with my fingers.
Only then I let the AI do any code changes at all. Pro tip number six, context engineering. Clear prompts equal clear output. Be specific about the inputs, outputs, and constraints of every single feature. And make sure to actually create a markdown file for every feature. This is very OP because it can be like a scratch pad for the AI agent to write notes and for you to refine your vision as you work.
Really, this is like non-negotiable for me. Also, make sure to just tag all of the relevant files. Don't waste the AI's time, right? The AI can waste your time, but you can waste its time. If you already know where the feature should be implemented or which files the bug is in, tag them. It will make your AI agents much better. Trust me.
Also start building internal documents of all the features, all the parts of your app, all the data types, architecture, everything. So you can easily tag these dogs and not only speed up your own learning curve or when you hire a new developer, you can get them up to speed faster, but you can tag these dogs for AI and the AI can easily learn and quickly learn how your codebase works.
Now, you always have to remind yourself that you as the human are the decision maker. Make sure to keep the big picture in the view. Don't trust the AI blindly. Use it for what it's good at, but don't trust it for what it's bad at, such as creativity, taste, naming, codebased architecture, the most important things really.
When something inevitably breaks, the best thing you can do is to use AI to understand the root issue yourself. I cannot stress this enough. Upskilling yourself with AI is the biggest hack. It's the biggest cheat code that nobody's talking about. Everybody's like, "Okay, build this, VIP code this, VIP code that." Guys, you can literally upskill yourself three times faster than you could otherwise.
Before AI models, it would take you multiple years to become proficient at a programming language. With AI, you can ask hundreds questions every single day and it will teach you. It will reiterate, will explain it in a different way. It will browse the web to get examples. It's insane. Use it for learning. Use it for upscreen yourself.
And not only will you benefit from the exponential curve of AI, but you will add another exponential that's even more steep of your own AI skill set. Now, no matter what, do not ever delegate your thinking to AI. I don't really envy the new generation because all of these kids are raised with chbpt.
But you need to make product decisions. You need to stay in charge. You need to have that taste. You need to trust your you need to trust and develop your own judgment. Do not ask the AI what the next feature should be. You as the founder should know that. So instead of listening to AI, listen to your own intuition plus your own users.
Talk to your users as much as possible. I know everybody in Silicon Valley in the startup world says this, but guys, until you actually run a startup, you don't realize how important this is. The only thing that really matters is what the users want. So, build something that the users want.
Now, since you watched the entire video, I'm going to give you a little bonus that I discovered today, and that is giving Cloud Code custom hooks. So, what is a hook? If you don't know, a hook is a script that runs before or after Clude does something like editing, running a tool, or stopping. It lets you auto format code, block risky commands, run tests, send alerts, or really do anything you want.
Like some people literally have it play a sound to notify them, oh, CLC has finished running. So basically, hooks are automated control over what cloud code does, allowing you to customize it in infinite possible ways. Let me show you. So here I am inside of cursor. I'm going to show you three different cloud code hooks all of you should really set up.
And the beauty of this, it takes like 2 minutes to set up. So let me show you. First hook is this one. Append ultra thing. This one I borrowed from McKay Riley on Twitter, so shout out to him. But basically the way this hook works is that anytime your prompt ends with dash u, it appends this prompt right here. Use the maximum amount of ultra think. Take all the time you need.
It's much better if you do too much research and thinking than not enough. You have to realize ultra think this actually has influence on the reasoning effort of clo code. Enthropic built this in into clo code. It can recognize four different words. Think, think hard, think harder and ultra think. That is the most powerful level of reasoning effort.
So this isn't just some weird prompting technique. This actually directly impacts how many tokens will go into the reasoning effort of your next clo response. Now the next hook I built myself and this one will be automatically appended anytime you finish your prompt with dash e. And here's what it says. Above are the relevant logs.
Your job is to think harder about what these logs say. Give me a simpler and short explanation. Do not jump to conclusions. Do not make assumptions. Quiet your ego. Assume you know nothing. If you've worked with cloth for models or any clo models, you know like the you're absolutely right or oh I see the issue now.
This is beyond frustrating, right? And by adding lines like this, you greatly eliminate it. So basically the way I use this cloth code hook is for understanding logs, right? Maybe I paste in 500 lines of backend logs and I do e, which is way faster than typing these six sentences, right? and Clo will basically explain the logs to me, suggest what the next step is and why that should be the next step and answer in short.
So, I use this multiple times a day and save so much time. Now, the last hook is actually my favorite because this one I use virtually after every single prompt. I mean, you cannot go wrong by sending this one. And by the way, I posted this on Twitter and both of my tweets got a lot of traction. By the way, if you don't follow me on Twitter, you really are missing out.
But anyways, this is my golden prompt. This is like this is a David Andre prompt. So anytime my message ends with dash d this gets appended at the end. Think harder answer in short. Keep it simple. Really you cannot go wrong with this. It improves every single output. No matter if you're asking question or if you're fixing a bug or implementing a feature if you just add this at the end of every single prompt clo will perform better.
I can guarantee you that. Unfortunately typing these eight words is way slower than just typing two characters which is the power of the hook. Now to make these hooks work, you have to actually add them to your settings.json file inside of the cloth folder. And again, if you get stuck at any point, just go into vectal, ask the question, and it will tell you how to set it up.
The reason for that is vectal uses perplexity pro in the back end. So if you use vectal, you literally don't have to pay for perplexity pro. Anyways, here's how it should look like inside of the settings.json. So obviously at the top you have your permissions, list of allowed commands, list of denied commands.
All of these are in the new society. By the way, if you're serious about AI, make sure to join the new society. But then at the bottom, you need to append the hooks to kind of register to them so that they actually run automatically. Cloudco doesn't use them. These get executed by themselves on different actions, right? So, one of the possible ones is user prompt submit.
Anytime the user submits a prompt, we check whether any of these hooks should be activated. And by the way, I just asked Veil to browse the web and find the main hooks in cloud code. Here they are. So, user prompt submit hook. The one we're using here, pre-tool use hook. So before using a tool, you can customize again endless amounts of actions or checks or tests that should run before cloud code uses a tool.
Then after it uses a tool, right? Maybe there's a quick uh backend test you want to run after uses tool or some llinter. You can easily do that or a notification hook, right? A lot of people have a sound or like a sentence like a human voice speaking out when cloud code finishes because um it can sometimes run for a long time and maybe you switch to a different tab and do something else.
So yeah, with hooks you can customize your cloth code experience to your liking. And that's why I highly recommend you take two minutes and add these hooks into your cloth code setup. It's going to save you so much time. But hooks are just one part of cloth code. There is sub aents. There is commands. Cloth code is amazing.
There's a lot to learn. In fact, I made an entire workshop called the cloth code mastery on how to become a top 1% of user of cloth code. I've used it for well over 300 hours. basically every single day since it released for like 4 to 8 hours a day every day. And in this workshop, not only do I explain how you can go from complete beginner to top 1% clo expert, but also I give you all of my files, I give you all of my prompts such as the main cloud. MD I'm using.
I also give you my settings.loc.json, my protocol.md for all GitHub protocols, all of my cloud code sub aents commands, the entire stack, everything you might need. Plus, we host weekly calls where you can ask anything if you get stuck. So, if you're serious about coding with AI, make sure to join the society.
It's going to be linked below the video