# Phase 1C: Type System Analysis Audit Results
# Date: August 14, 2025
# Purpose: Role standardization migration - type system analysis

## SUMMARY
Analyzed TypeScript type definitions across the POWLAX codebase to identify all role-related types, enums, interfaces, and constraints that will need updating during the role standardization migration from 'admin' to 'administrator'.

## FILES REQUIRING TYPE UPDATES

### 1. Core Database Types
**File:** src/types/database.ts
- Lines 114, 115: `role: string` and `roles: string[]` in DatabaseUser interface
- Status: CRITICAL - Main user type definition
- Dependencies: Used throughout application

**File:** src/types/teams.ts  
- Lines 72, 86: Role constraints in UserClubRole and UserTeamRole interfaces
- Line 6: ViewableRole type definition
- Status: CRITICAL - Team membership role definitions

### 2. Context and State Management
**File:** src/contexts/RoleViewerContext.tsx
- Line 6: `ViewableRole` type definition
- Lines 23-29: Available roles array with hardcoded values
- Status: IMPORTANT - Admin role viewing functionality

### 3. Hook Interfaces
**File:** src/hooks/useBulkUserOperations.ts
- Lines 8, 41, 52-56: User interface with roles array and BulkRoleOperation interface
- Status: IMPORTANT - Admin bulk operations

**File:** src/hooks/useRoleAuditLog.ts
- Lines 6-18: RoleChangeLog interface with old_roles/new_roles arrays
- Lines 20-32: PermissionTemplate interface with roles array
- Status: IMPORTANT - Role audit logging

### 4. Component Interfaces
**File:** src/components/onboarding/WelcomeModal.tsx  
- Lines 8-16: UserRole interface definition
- Line 17: roles array with hardcoded role values
- Status: MODERATE - User onboarding

**File:** Various team dashboard components
- Multiple files import UserTeamRole type from src/types/teams.ts
- Status: LOW - Uses imported types (will inherit fixes)

## ROLE ENUM DEFINITIONS FOUND

### No Direct Enums
- No formal TypeScript enums found for roles
- Roles defined as string literals in union types and arrays

### Union Type Definitions
**File:** src/contexts/RoleViewerContext.tsx
```typescript
export type ViewableRole = 'player' | 'team_coach' | 'parent' | 'club_director' | null
```
- Status: Does not include 'admin' or 'administrator' - may need update

**File:** src/types/teams.ts
```typescript  
role: 'head_coach' | 'assistant_coach' | 'player' | 'parent' | 'admin'
role: 'owner' | 'admin' | 'director'
```
- Status: CRITICAL - Contains 'admin' values that need migration to 'administrator'

## INTERFACE DEFINITIONS WITH ROLE PROPERTIES

### Database Level Interfaces
1. **DatabaseUser** (database.ts:110-123)
   - `role: string` - Primary role field
   - `roles: string[]` - Multi-role support

2. **DatabaseTeamMember** (database.ts:336-346) 
   - `role: 'head_coach' | 'assistant_coach' | 'player' | 'parent' | 'admin'`

### Team Management Interfaces  
3. **UserClubRole** (teams.ts:68-77)
   - `role: 'owner' | 'admin' | 'director'`

4. **UserTeamRole** (teams.ts:82-93)
   - `role: 'head_coach' | 'assistant_coach' | 'team_admin' | 'player' | 'parent'`

### Operation Interfaces
5. **BulkRoleOperation** (useBulkUserOperations.ts:52-56)
   - Operations on role arrays (add, remove, set)

6. **RoleChangeLog** (useRoleAuditLog.ts:6-18)
   - `old_roles: string[]` and `new_roles: string[]` - Audit history

## TYPE CONSTRAINTS AND DEPENDENCIES

### String Literal Constraints
- Team member roles: Limited to specific coach/player/parent values + 'admin'
- Club member roles: Limited to 'owner' | 'admin' | 'director'  
- Viewable roles: Does not include admin roles

### Array Type Dependencies
- Most role handling uses `string[]` rather than specific union types
- Allows flexibility but reduces type safety

### Cross-File Dependencies
```
database.ts → teams.ts → components (inheritance chain)
contexts/RoleViewerContext.tsx → dashboard components
hooks/useBulkUserOperations.ts → admin components
```

## MIGRATION IMPACT ASSESSMENT

### HIGH PRIORITY (Breaking Changes)
1. **src/types/teams.ts** - Hard-coded 'admin' in union types
2. **src/types/database.ts** - Core user type definitions
3. **Component hardcoded arrays** - Role selection dropdowns

### MEDIUM PRIORITY (Runtime Issues)
1. **src/contexts/RoleViewerContext.tsx** - Admin role viewing
2. **Hook interfaces** - Bulk operations and audit logs

### LOW PRIORITY (Inherited Updates)
1. **Team dashboard components** - Use imported types
2. **Generic string[] role fields** - No specific constraints

## RECOMMENDED APPROACH

### 1. Update Union Types First
- Modify hard-coded union types in teams.ts
- Update DatabaseTeamMember role constraints

### 2. Update Hardcoded Arrays
- Find and replace 'admin' with 'administrator' in role arrays
- Update ViewableRole type if needed

### 3. Test Type Compilation
- Run TypeScript compiler to catch type mismatches
- Update any missed string literal comparisons

### 4. Validate Runtime Behavior
- Ensure role checking logic handles new 'administrator' value
- Verify dropdown and UI components display correctly

## NOTES
- Most role handling uses flexible string[] types rather than strict unions
- This reduces type safety but makes migration easier
- No complex type inheritance chains found
- Focus on hard-coded union types and literal arrays for migration