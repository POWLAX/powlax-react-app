-- POWLAX Simple Table Verification\n-- Created: 2025-01-16\n-- Purpose: Simple check of what auth tables actually exist\n\n-- ==========================================\n-- CHECK WHAT AUTH TABLES EXIST\n-- ==========================================\n\nSELECT \n  'TABLE EXISTENCE CHECK' as check_type,\n  table_name,\n  CASE \n    WHEN table_name IN (\n      'users', 'user_sessions', 'user_subscriptions', 'user_activity_log',\n      'registration_links', 'registration_sessions', 'user_onboarding', \n      'webhook_queue', 'webhook_events', 'membership_products', \n      'membership_entitlements', 'team_members'\n    ) THEN '✅ REQUIRED AUTH TABLE'\n    ELSE 'Other table'\n  END as status\nFROM information_schema.tables \nWHERE table_schema = 'public'\n  AND table_name ~ '^(user_|registration_|webhook_|membership_|team_members)'\nORDER BY table_name;\n\n-- ==========================================\n-- SHOW MISSING TABLES\n-- ==========================================\n\nSELECT \n  'MISSING TABLES CHECK' as check_type,\n  unnest(ARRAY[\n    'users', 'user_sessions', 'user_subscriptions', 'user_activity_log',\n    'registration_links', 'registration_sessions', 'user_onboarding', \n    'webhook_queue', 'webhook_events', 'membership_products', \n    'membership_entitlements', 'team_members'\n  ]) as required_table,\n  CASE \n    WHEN EXISTS (\n      SELECT 1 FROM information_schema.tables \n      WHERE table_schema = 'public' \n      AND table_name = unnest(ARRAY[\n        'users', 'user_sessions', 'user_subscriptions', 'user_activity_log',\n        'registration_links', 'registration_sessions', 'user_onboarding', \n        'webhook_queue', 'webhook_events', 'membership_products', \n        'membership_entitlements', 'team_members'\n      ])\n    ) THEN '✅ EXISTS'\n    ELSE '❌ MISSING'\n  END as status;\n\n-- ==========================================\n-- SHOW TABLE COUNTS\n-- ==========================================\n\nSELECT 'TABLE COUNTS' as check_type, 'users' as table_name, COUNT(*) as record_count FROM users\nUNION ALL\nSELECT 'TABLE COUNTS', 'user_sessions', COUNT(*) FROM user_sessions\nUNION ALL  \nSELECT 'TABLE COUNTS', 'user_subscriptions', COUNT(*) FROM user_subscriptions\nUNION ALL\nSELECT 'TABLE COUNTS', 'user_activity_log', COUNT(*) FROM user_activity_log\nUNION ALL\nSELECT 'TABLE COUNTS', 'webhook_events', COUNT(*) FROM webhook_events\nORDER BY table_name;
