# Skills Academy Complete Implementation â€” Master Contract
# Version 2.0 - Enhanced with User Feedback

contract:
  id: skills-academy-complete-002
  type: GENERAL_SUB_AGENT_CONTRACT
  owner: general-purpose-sub-agents-only
  created: 2025-08-08
  updated: 2025-01-11
  status: ACTIVE
  priority: CRITICAL
  
# ðŸš¨ CRITICAL: ONLY USE GENERAL-PURPOSE SUB-AGENTS
# NO complex parallel execution or specialized controllers!

# Current State Analysis
currentState:
  completedFeatures:
    - Basic workout selection UI exists
    - 41 series cards display correctly
    - Workout size selector modal works
    - Video player component implemented
    - Points system partially integrated
    - Completion screens created
  
  criticalIssues:
    - RESOLVED: drill_ids column in skills_academy_workouts table contains all drill connections!
    - RESOLVED: All 118 workouts have populated drill_ids arrays (no junction table needed)
    - RESOLVED: Videos now playing correctly with real Vimeo IDs
    - NEW: Created /skills-academy/workouts page with position-based track cards
    - REMAINING: Points not persisting to database
    - REMAINING: No real progress tracking
    - REMAINING: Workout flow needs enhancement
  
  qualityIssues:
    - Inconsistent styling across components
    - Mobile responsiveness incomplete
    - No loading states for data fetching
    - Error handling missing
    - Accessibility not implemented

# Target State Requirements
targetState:
  core:
    description: "Fully functional Skills Academy with real drill data and persistence"
    
  dataIntegration:
    - Connect to skills_academy_drill_library table
    - Map Vimeo IDs from database
    - Persist progress to skills_academy_user_progress
    - Track points in user_points_balance_powlax
    - Store workout completions with timestamps
    
  uiRequirements:
    - White background modals with dark text
    - Consistent POWLAX brand colors
    - Mobile-first responsive design (375px+)
    - Touch targets minimum 60px for workout buttons
    - High contrast for outdoor field use
    
  workflowRequirements:
    - Seamless flow: Series â†’ Size Selection â†’ Workout â†’ Completion
    - Auto-advance after drill completion
    - Points awarded and persisted
    - Streak tracking implementation
    - Return to main hub after completion

# Execution Strategy - GENERAL SUB-AGENTS ONLY
executionStrategy:
  type: sequential  # Use simple sequential general-purpose sub-agents
  
  # General Sub-Agent Configuration
  generalSubAgents:
    approach: "One focused task per general-purpose sub-agent"
    complexity: "Simple, no orchestration needed"
    
    # Ultra Think Planning (MANDATORY)
    ultraThinkPlanning:
      completed: true  # âœ… COMPLETED 2025-08-09
      duration: "10 minutes"  # Extra time for complexity
      commonErrorsEvaluated: true
      fileCollisionRisksAssessed: true
      checklist:
        - [x] Review all common errors from docs
        - [x] Map file boundaries for each agent
        - [x] Identify shared dependencies
        - [x] Plan integration strategy
        - [x] Document potential conflicts
      
      # CRITICAL FINDING: Launch Agent 2 FIRST, then others
      executionOrder:
        stage1: "Agent 2 (Database) - MUST complete first"
        stage2: "Agents 1, 3, 4, 5 - Launch in parallel after Agent 2"
        reason: "Database migration is foundational, others depend on drill data"
    
    # Agent distribution across 5 major sections
    agentDistribution:
      agent_1_routing:
        type: general-purpose
        scope: "Fix page routing and navigation"
        files: 
          - "/app/(authenticated)/skills-academy/workouts/page.tsx"
          - "navigation components"
        noTouch: ["database", "hooks", "components/skills-academy"]
        deliverables:
          - Delete duplicate workouts page
          - Update all navigation links
          - Verify routing works
        
      agent_2_database:
        type: general-purpose
        scope: "Database migration and data connections"
        files:
          - "migrations/*.sql"
          - "scripts/populate*.ts"
          - "hooks/useSkillsAcademyWorkouts.ts"
        noTouch: ["pages", "navigation", "components"]
        deliverables:
          - Run drill-workout mapping SQL
          - Update hooks to use drill_ids
          - Remove workaround code
        
      agent_3_components:
        type: general-purpose
        scope: "Component cleanup and consolidation"
        files:
          - "components/skills-academy/SkillsAcademyHub.tsx"
          - "components/skills-academy/SkillsAcademySeriesCard.tsx"
        noTouch: ["database", "pages", "hooks"]
        deliverables:
          - Remove non-Enhanced components
          - Update all imports
          - Ensure consistency
        
      agent_4_modals:
        type: general-purpose
        scope: "Modal styling and video integration"
        files:
          - "components/skills-academy/WorkoutSizeSelector.tsx"
          - "components/skills-academy/WorkoutPreviewModal.tsx"
          - "workout/[id]/page.tsx (video section only)"
        noTouch: ["database", "navigation", "core hooks"]
        deliverables:
          - Fix white background modals
          - Connect real Vimeo IDs
          - Implement loading states
        
      agent_5_persistence:
        type: general-purpose
        scope: "Points system and progress tracking"
        files:
          - "app/api/workouts/progress/*"
          - "hooks/useProgressTracking.ts"
          - "hooks/usePointsCalculation.ts"
        noTouch: ["pages", "navigation", "components"]
        deliverables:
          - Create progress API
          - Implement 6-point system
          - Add streak tracking
    
    # Progress tracking
    parallelProgress:
      - agent: 1
        task: "Routing fixes"
        status: not_started
        completedAt: ""
        testsPass: false
        blockers: []
        
      - agent: 2
        task: "Database migration"
        status: not_started
        completedAt: ""
        testsPass: false
        blockers: []
        
      - agent: 3
        task: "Component cleanup"
        status: not_started
        completedAt: ""
        testsPass: false
        blockers: []
        
      - agent: 4
        task: "Modal integration"
        status: not_started
        completedAt: ""
        testsPass: false
        blockers: []
        
      - agent: 5
        task: "Persistence system"
        status: not_started
        completedAt: ""
        testsPass: false
        blockers: []
    
    # Integration checklist (after all agents complete)
    integrationChecklist:
      - [ ] All 5 agents completed
      - [ ] No file conflicts detected
      - [ ] Each agent's Playwright tests pass
      - [ ] Integrated code builds: npm run build
      - [ ] Full Playwright suite passes
      - [ ] No regressions in Practice Planner
      - [ ] Skills Academy flow works end-to-end
      - [ ] Common errors documented

# Phased Implementation Plan (If Sequential Execution Used)
phases:
  phase1:
    name: "Data Foundation & UI Fixes"
    duration: "4 hours"
    agent: powlax-backend-architect
    priority: CRITICAL
    
    tasks:
      - task: "Fix drill data connections"
        description: "Connect skills_academy_workout_drills to skills_academy_drill_library"
        acceptance:
          - Real drill names display
          - Vimeo IDs properly extracted
          - All workout sizes have correct drill counts
          
      - task: "Fix modal styling"
        description: "White background, dark text for all modals"
        acceptance:
          - WorkoutSizeSelector has white bg
          - All text clearly readable
          - Consistent with POWLAX design system
          
      - task: "Implement data persistence"
        description: "Save progress and points to database"
        acceptance:
          - Progress saves to skills_academy_user_progress
          - Points update in user_points_balance_powlax
          - Completion timestamps recorded
    
    qualityGates:
      - Database queries return real data
      - No console errors
      - Build passes: npm run build:verify
      - Modal contrast ratio > 7:1
  
  phase2:
    name: "Workout Flow Integration"
    duration: "3 hours"
    agent: powlax-frontend-developer
    priority: HIGH
    
    tasks:
      - task: "Integrate workout runner with main hub"
        description: "Seamless navigation through entire flow"
        acceptance:
          - Click series â†’ Opens size selector modal
          - Select size â†’ Navigates to workout runner
          - Complete workout â†’ Returns to hub with success message
          
      - task: "Implement loading states"
        description: "Show loading indicators during data fetch"
        acceptance:
          - Skeleton screens while loading
          - Error states for failures
          - Retry mechanisms
          
      - task: "Add progress indicators"
        description: "Visual feedback throughout workout"
        acceptance:
          - Progress bar updates per drill
          - Drill counter shows X of Y
          - Time tracking display
    
    qualityGates:
      - Full E2E flow works without page refreshes
      - Loading states < 3 seconds
      - Mobile navigation works smoothly
      - Playwright tests pass
  
  phase3:
    name: "Gamification & Polish"
    duration: "2 hours"
    agent: powlax-ux-researcher
    priority: MEDIUM
    
    tasks:
      - task: "Implement points animation"
        description: "Visual feedback for points earned"
        acceptance:
          - Points animate on completion
          - Bonus multiplier clearly shown
          - Total points display updates
          
      - task: "Add streak tracking"
        description: "Track consecutive workout days"
        acceptance:
          - Streak counter visible
          - Streak bonus calculation
          - Streak persistence in database
          
      - task: "Polish mobile experience"
        description: "Optimize for field use"
        acceptance:
          - Large touch targets (60px+)
          - High contrast outdoors
          - Swipe gestures work
          - Portrait orientation optimized
    
    qualityGates:
      - Animations smooth (60fps)
      - Mobile Lighthouse score > 90
      - Accessibility audit passes
      - User can complete workout one-handed

# Success Criteria
successCriteria:
  functional:
    - ALL drills show real names from database
    - ALL videos play from correct Vimeo IDs
    - Progress saves and persists across sessions
    - Points accumulate correctly
    - Workouts can be repeated
    - Navigation flow is seamless
    
  performance:
    - Page load < 2 seconds
    - Video starts < 3 seconds
    - No janky animations
    - Smooth scroll on mobile
    
  quality:
    - Zero console errors
    - Build passes all checks
    - 80% test coverage
    - Lighthouse score > 85
    
  ux:
    - Players can complete workout outdoors
    - One-handed operation possible
    - Clear visual feedback throughout
    - Motivating completion experience

# Quality Gates (Universal)
qualityGates:
  required:
    - npm run lint -- --max-warnings=0
    - npm run typecheck
    - npm run build
    - npx playwright test skills-academy
  
  metrics:
    buildTime: "< 30 seconds"
    bundleSize: "< 500kb"
    testCoverage: "> 80%"
    lighthouseScore: "> 85"

# Agent Coordination
agentRoles:
  powlaxMasterController:
    responsibilities:
      - Contract negotiation and lock
      - Phase orchestration
      - Quality gate enforcement
      - User communication
      - Final sign-off
    
  powlaxBackendArchitect:
    responsibilities:
      - Database schema optimization
      - Query performance tuning
      - Data persistence layer
      - API endpoint creation
    
  powlaxFrontendDeveloper:
    responsibilities:
      - Component implementation
      - State management
      - UI/UX polish
      - Mobile optimization
    
  powlaxUxResearcher:
    responsibilities:
      - User flow validation
      - Accessibility audit
      - Performance testing
      - Field usability verification

# Risk Mitigation
risks:
  - risk: "Database schema changes break existing data"
    mitigation: "Create migrations, test on staging first"
    
  - risk: "Video URLs are inconsistent format"
    mitigation: "Create URL parser that handles multiple formats"
    
  - risk: "Mobile performance degrades with videos"
    mitigation: "Implement lazy loading, optimize video settings"
    
  - risk: "Points system conflicts with existing gamification"
    mitigation: "Coordinate with gamification team, use transactions"

# Acceptance & Sign-off
acceptance:
  demoCriteria:
    - Complete full workout flow end-to-end
    - Show real drill names and videos
    - Demonstrate points accumulation
    - Verify mobile experience
    - Check data persistence
    
  userAcceptance:
    - User can select any workout
    - Videos play without buffering
    - Points feel rewarding
    - Mobile experience is smooth
    - Data saves correctly
    
  finalChecklist:
    - [ ] All phases complete
    - [ ] Quality gates passed
    - [ ] Playwright tests green
    - [ ] Mobile field-tested
    - [ ] User approved UX
    - [ ] Documentation updated

# Notes for Implementation
notes:
  - Start with Phase 1 immediately (critical data fixes)
  - Modal styling is quick win - do first
  - Test with real workout IDs from database
  - Ensure backward compatibility with existing data
  - Coordinate with Patrick on video URL formats
  - Mobile experience is critical for field use

# Contract Sign-off
signoff:
  masterController: PENDING
  user: PENDING
  timestamp: null
  
---
# This contract supersedes skills-academy-complete-001
# All agents must reference this contract when working on Skills Academy